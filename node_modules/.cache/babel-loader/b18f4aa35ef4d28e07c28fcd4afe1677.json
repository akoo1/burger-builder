{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/alfred/Desktop/React - The Complete Guide/burger-builder/src/container/BurgerBuilder/BurgerBuilder.js\";\nimport React, { Component } from 'react';\nimport BuildControls from '../../components/Burger/BuildControls/BuildControls';\nimport Burger from '../../components/Burger/Burger';\nconst INGREDIENT_PRICES = {\n  meat: 1.5,\n  cheese: 0.5,\n  bacon: 0.75,\n  salad: 0.5\n};\n\nclass BurgerBuilder extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      ingredients: {\n        meat: 0,\n        cheese: 0,\n        bacon: 0,\n        salad: 0\n      },\n      totalPrice: 4\n    };\n\n    this.addIngredientHandler = type => {\n      const oldCount = this.state.ingredients[type];\n      const updatedCount = oldCount + 1; // This creates a deep copy of the object \n      // (for arrays and objects, state should be updated in an immutable way, cuz they are reference types)\n\n      let updatedIngredients = { ...this.state.ingredients\n      };\n      updatedIngredients[type] = updatedCount;\n      let updatedTotalPrice = this.state.totalPrice + INGREDIENT_PRICES[type];\n      this.setState({\n        ingredients: updatedIngredients,\n        totalPrice: updatedTotalPrice\n      });\n    };\n\n    this.removeIngredientHandler = type => {\n      const oldCount = this.state.ingredients[type];\n\n      if (oldCount <= 0) {\n        return;\n      }\n\n      const updatedCount = oldCount - 1;\n      let updatedIngredients = { ...this.state.ingredients\n      };\n      updatedIngredients[type] = updatedCount;\n      let updatedTotalPrice = this.state.totalPrice - INGREDIENT_PRICES[type];\n      this.setState({\n        ingredients: updatedIngredients,\n        totalPrice: updatedTotalPrice\n      });\n    };\n  }\n\n  render() {\n    const disabledInfo = { ...this.state.ingredients\n    };\n    console.log(disabledInfo); // The for..in is used to iterate through an object\n\n    for (let key in disabledInfo) {\n      // Assign a boolean value to each ingredient in the new ingredients object\n      disabledInfo[key] = disabledInfo[key] <= 0;\n    }\n\n    console.log(disabledInfo); // { meat: false, salad: true, cheese: true ...}\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Burger, {\n          ingredients: this.state.ingredients\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(BuildControls, {\n          addIngredientHandler: this.addIngredientHandler,\n          removeIngredientHandler: this.removeIngredientHandler,\n          disabledInfo: this.disabledInfo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default BurgerBuilder;","map":{"version":3,"sources":["/Users/alfred/Desktop/React - The Complete Guide/burger-builder/src/container/BurgerBuilder/BurgerBuilder.js"],"names":["React","Component","BuildControls","Burger","INGREDIENT_PRICES","meat","cheese","bacon","salad","BurgerBuilder","state","ingredients","totalPrice","addIngredientHandler","type","oldCount","updatedCount","updatedIngredients","updatedTotalPrice","setState","removeIngredientHandler","render","disabledInfo","console","log","key"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,aAAP,MAA0B,qDAA1B;AACA,OAAOC,MAAP,MAAmB,gCAAnB;AAEA,MAAMC,iBAAiB,GAAG;AACxBC,EAAAA,IAAI,EAAE,GADkB;AAExBC,EAAAA,MAAM,EAAE,GAFgB;AAGxBC,EAAAA,KAAK,EAAE,IAHiB;AAIxBC,EAAAA,KAAK,EAAE;AAJiB,CAA1B;;AAOA,MAAMC,aAAN,SAA4BR,SAA5B,CAAsC;AAAA;AAAA;AAAA,SAEpCS,KAFoC,GAE5B;AACNC,MAAAA,WAAW,EAAE;AACXN,QAAAA,IAAI,EAAE,CADK;AAEXC,QAAAA,MAAM,EAAE,CAFG;AAGXC,QAAAA,KAAK,EAAE,CAHI;AAIXC,QAAAA,KAAK,EAAE;AAJI,OADP;AAONI,MAAAA,UAAU,EAAE;AAPN,KAF4B;;AAAA,SAYpCC,oBAZoC,GAYZC,IAAD,IAAU;AAC/B,YAAMC,QAAQ,GAAG,KAAKL,KAAL,CAAWC,WAAX,CAAuBG,IAAvB,CAAjB;AACA,YAAME,YAAY,GAAGD,QAAQ,GAAG,CAAhC,CAF+B,CAG/B;AACA;;AACA,UAAIE,kBAAkB,GAAG,EAAE,GAAG,KAAKP,KAAL,CAAWC;AAAhB,OAAzB;AACAM,MAAAA,kBAAkB,CAACH,IAAD,CAAlB,GAA2BE,YAA3B;AACA,UAAIE,iBAAiB,GAAG,KAAKR,KAAL,CAAWE,UAAX,GAAwBR,iBAAiB,CAACU,IAAD,CAAjE;AACA,WAAKK,QAAL,CAAc;AACZR,QAAAA,WAAW,EAAEM,kBADD;AAEZL,QAAAA,UAAU,EAAEM;AAFA,OAAd;AAID,KAxBmC;;AAAA,SA0BpCE,uBA1BoC,GA0BTN,IAAD,IAAU;AAClC,YAAMC,QAAQ,GAAG,KAAKL,KAAL,CAAWC,WAAX,CAAuBG,IAAvB,CAAjB;;AACA,UAAIC,QAAQ,IAAI,CAAhB,EAAmB;AACjB;AACD;;AACD,YAAMC,YAAY,GAAGD,QAAQ,GAAG,CAAhC;AACA,UAAIE,kBAAkB,GAAG,EAAE,GAAG,KAAKP,KAAL,CAAWC;AAAhB,OAAzB;AACAM,MAAAA,kBAAkB,CAACH,IAAD,CAAlB,GAA2BE,YAA3B;AACA,UAAIE,iBAAiB,GAAG,KAAKR,KAAL,CAAWE,UAAX,GAAwBR,iBAAiB,CAACU,IAAD,CAAjE;AACA,WAAKK,QAAL,CAAc;AACZR,QAAAA,WAAW,EAAEM,kBADD;AAEZL,QAAAA,UAAU,EAAEM;AAFA,OAAd;AAID,KAvCmC;AAAA;;AA0CpCG,EAAAA,MAAM,GAAG;AAEP,UAAMC,YAAY,GAAG,EAAC,GAAG,KAAKZ,KAAL,CAAWC;AAAf,KAArB;AACAY,IAAAA,OAAO,CAACC,GAAR,CAAYF,YAAZ,EAHO,CAIP;;AACA,SAAK,IAAIG,GAAT,IAAgBH,YAAhB,EAA8B;AAC5B;AACAA,MAAAA,YAAY,CAACG,GAAD,CAAZ,GAAoBH,YAAY,CAACG,GAAD,CAAZ,IAAqB,CAAzC;AACD;;AACDF,IAAAA,OAAO,CAACC,GAAR,CAAYF,YAAZ,EATO,CAUP;;AAEA,wBACE;AAAA,8BACE;AAAA,+BACE,QAAC,MAAD;AAAQ,UAAA,WAAW,EAAE,KAAKZ,KAAL,CAAWC;AAAhC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eAIE;AAAA,+BACE,QAAC,aAAD;AACE,UAAA,oBAAoB,EAAE,KAAKE,oBAD7B;AAEE,UAAA,uBAAuB,EAAE,KAAKO,uBAFhC;AAGE,UAAA,YAAY,EAAE,KAAKE;AAHrB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA,oBADF;AAcD;;AApEmC;;AA0EtC,eAAeb,aAAf","sourcesContent":["import React, { Component } from 'react'\nimport BuildControls from '../../components/Burger/BuildControls/BuildControls'\nimport Burger from '../../components/Burger/Burger'\n\nconst INGREDIENT_PRICES = {\n  meat: 1.5,\n  cheese: 0.5,\n  bacon: 0.75,\n  salad: 0.5\n}\n\nclass BurgerBuilder extends Component {\n\n  state = {\n    ingredients: {\n      meat: 0,\n      cheese: 0,\n      bacon: 0,\n      salad: 0\n    },\n    totalPrice: 4\n  }\n\n  addIngredientHandler = (type) => {\n    const oldCount = this.state.ingredients[type]\n    const updatedCount = oldCount + 1\n    // This creates a deep copy of the object \n    // (for arrays and objects, state should be updated in an immutable way, cuz they are reference types)\n    let updatedIngredients = { ...this.state.ingredients }\n    updatedIngredients[type] = updatedCount\n    let updatedTotalPrice = this.state.totalPrice + INGREDIENT_PRICES[type]\n    this.setState({\n      ingredients: updatedIngredients,\n      totalPrice: updatedTotalPrice\n    })\n  }\n\n  removeIngredientHandler = (type) => {\n    const oldCount = this.state.ingredients[type]\n    if (oldCount <= 0) {\n      return \n    }\n    const updatedCount = oldCount - 1\n    let updatedIngredients = { ...this.state.ingredients }\n    updatedIngredients[type] = updatedCount\n    let updatedTotalPrice = this.state.totalPrice - INGREDIENT_PRICES[type]\n    this.setState({\n      ingredients: updatedIngredients,\n      totalPrice: updatedTotalPrice\n    })\n  }\n\n\n  render() {\n\n    const disabledInfo = {...this.state.ingredients}\n    console.log(disabledInfo)\n    // The for..in is used to iterate through an object\n    for (let key in disabledInfo) {\n      // Assign a boolean value to each ingredient in the new ingredients object\n      disabledInfo[key] = disabledInfo[key] <= 0\n    }\n    console.log(disabledInfo)\n    // { meat: false, salad: true, cheese: true ...}\n\n    return (\n      <>\n        <div>\n          <Burger ingredients={this.state.ingredients} />\n        </div>\n        <div>\n          <BuildControls\n            addIngredientHandler={this.addIngredientHandler}\n            removeIngredientHandler={this.removeIngredientHandler}\n            disabledInfo={this.disabledInfo}\n          />\n        </div>\n      </>\n    )\n  }\n}\n\n\n\n\nexport default BurgerBuilder;"]},"metadata":{},"sourceType":"module"}