{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/alfred/Desktop/React - The Complete Guide/burger-builder/src/components/Burger/GraphicalBurger.js\";\nimport React from 'react';\nimport './Burger.css';\nimport BurgerIngredient from './BurgerIngredient/BurgerIngredient';\n\nconst Burger = props => {\n  // The Object.keys method will turn an object into an array of its keys\n  const ingredientsArr = Object.keys(props.ingredients); // [meat, salad, bacon]\n  // Array() constructor creates an array with specified number of empty values. Ex. [,] length = 2 \n  // We don't care about what those values are, we just need an array with the right length for each ingredient\n  // so we can use map() to populate the right number of that ingredient.\n\n  let transformedIngredients = ingredientsArr.map(name => [...Array(props.ingredients[name])] // [,]\n  .map((x, index) => /*#__PURE__*/_jsxDEV(BurgerIngredient, {\n    type: name\n  }, name + index, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 9\n  }, this))).reduce((arr, ele) => arr.concat(ele), []); // To flatten the array\n  // [ [obj1, obj2], [obj3], [obj4], [obj5] ]  => [obj1, obj2, obj3, obj4, obj5 ]\n\n  if (transformedIngredients.length === 0) {\n    transformedIngredients = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Please start adding ingredients!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 30\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"burger\",\n    children: [/*#__PURE__*/_jsxDEV(BurgerIngredient, {\n      type: \"breadTop\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), transformedIngredients, /*#__PURE__*/_jsxDEV(BurgerIngredient, {\n      type: \"breadBottom\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Burger;\nexport default Burger;\n\nvar _c;\n\n$RefreshReg$(_c, \"Burger\");","map":{"version":3,"sources":["/Users/alfred/Desktop/React - The Complete Guide/burger-builder/src/components/Burger/GraphicalBurger.js"],"names":["React","BurgerIngredient","Burger","props","ingredientsArr","Object","keys","ingredients","transformedIngredients","map","name","Array","x","index","reduce","arr","ele","concat","length"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,cAAP;AACA,OAAOC,gBAAP,MAA6B,qCAA7B;;AAEA,MAAMC,MAAM,GAAIC,KAAD,IAAW;AAExB;AACA,QAAMC,cAAc,GAAGC,MAAM,CAACC,IAAP,CAAYH,KAAK,CAACI,WAAlB,CAAvB,CAHwB,CAG+B;AAEvD;AACA;AACA;;AACA,MAAIC,sBAAsB,GAAGJ,cAAc,CAACK,GAAf,CAAmBC,IAAI,IAClD,CAAC,GAAGC,KAAK,CAACR,KAAK,CAACI,WAAN,CAAkBG,IAAlB,CAAD,CAAT,EAAqC;AAArC,GACGD,GADH,CACQ,CAACG,CAAD,EAAIC,KAAJ,kBACJ,QAAC,gBAAD;AAAqC,IAAA,IAAI,EAAEH;AAA3C,KAAuBA,IAAI,GAAGG,KAA9B;AAAA;AAAA;AAAA;AAAA,UAFJ,CAD2B,EAKxBC,MALwB,CAKjB,CAACC,GAAD,EAAMC,GAAN,KAAcD,GAAG,CAACE,MAAJ,CAAWD,GAAX,CALG,EAKc,EALd,CAA7B,CARwB,CAcpB;AACA;;AAGJ,MAAIR,sBAAsB,CAACU,MAAvB,KAAkC,CAAtC,EAAyC;AACvCV,IAAAA,sBAAsB,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAzB;AACD;;AAED,sBACE;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA,4BACE,QAAC,gBAAD;AAAkB,MAAA,IAAI,EAAC;AAAvB;AAAA;AAAA;AAAA;AAAA,YADF,EAEGA,sBAFH,eAGE,QAAC,gBAAD;AAAkB,MAAA,IAAI,EAAC;AAAvB;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CA7BD;;KAAMN,M;AAiCN,eAAeA,MAAf","sourcesContent":["import React from 'react'\nimport './Burger.css'\nimport BurgerIngredient from './BurgerIngredient/BurgerIngredient'\n\nconst Burger = (props) => {\n\n  // The Object.keys method will turn an object into an array of its keys\n  const ingredientsArr = Object.keys(props.ingredients)  // [meat, salad, bacon]\n\n  // Array() constructor creates an array with specified number of empty values. Ex. [,] length = 2 \n  // We don't care about what those values are, we just need an array with the right length for each ingredient\n  // so we can use map() to populate the right number of that ingredient.\n  let transformedIngredients = ingredientsArr.map(name => \n    [...Array(props.ingredients[name])]  // [,]\n      .map( (x, index) => \n        <BurgerIngredient key={name + index} type={name} />\n      ))  \n      .reduce((arr, ele) => arr.concat(ele), [])  \n      // To flatten the array\n      // [ [obj1, obj2], [obj3], [obj4], [obj5] ]  => [obj1, obj2, obj3, obj4, obj5 ]\n\n      \n  if (transformedIngredients.length === 0) {\n    transformedIngredients = <p>Please start adding ingredients!</p>\n  }\n\n  return (\n    <div className='burger'>\n      <BurgerIngredient type='breadTop' />\n      {transformedIngredients}\n      <BurgerIngredient type='breadBottom' />\n    </div>\n  )\n}\n\n\n\nexport default Burger;"]},"metadata":{},"sourceType":"module"}