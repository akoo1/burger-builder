{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/alfred/Desktop/React - The Complete Guide/burger-builder/src/container/BurgerBuilder/BurgerBuilder.js\";\nimport React, { Component } from 'react';\nimport BuildControlsList from '../../components/Burger/BuildControlsList/BuildControlsList';\nimport Burger from '../../components/Burger/Burger';\nimport OrderSummary from '../../components/Burger/OrderSummary/OrderSummary';\nimport Modal from '../../components/UI/Modal/Modal';\nconst INGREDIENT_PRICES = {\n  meat: 1.5,\n  cheese: 0.5,\n  bacon: 0.75,\n  salad: 0.5\n};\n\nclass BurgerBuilder extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      ingredients: {\n        meat: 0,\n        cheese: 0,\n        bacon: 0,\n        salad: 0\n      },\n      totalPrice: 0,\n      isPurchaseable: false,\n      isPurchasing: false\n    };\n\n    this.addIngredientHandler = type => {\n      const oldCount = this.state.ingredients[type];\n      const updatedCount = oldCount + 1; // This creates a deep copy of the object \n      // (for arrays and objects, state should be updated in an immutable way, cuz they are reference types)\n\n      let updatedIngredients = { ...this.state.ingredients\n      };\n      updatedIngredients[type] = updatedCount;\n      let updatedTotalPrice = this.state.totalPrice + INGREDIENT_PRICES[type];\n      this.setState({\n        ingredients: updatedIngredients,\n        totalPrice: updatedTotalPrice\n      });\n      this.updatePurchaseState(updatedIngredients);\n    };\n\n    this.removeIngredientHandler = type => {\n      const oldCount = this.state.ingredients[type];\n      const updatedCount = oldCount - 1;\n      let updatedIngredients = { ...this.state.ingredients\n      };\n      updatedIngredients[type] = updatedCount;\n      let updatedTotalPrice = this.state.totalPrice - INGREDIENT_PRICES[type];\n      this.setState({\n        ingredients: updatedIngredients,\n        totalPrice: updatedTotalPrice\n      });\n      this.updatePurchaseState(updatedIngredients);\n    };\n\n    this.getDisabledInfo = () => {\n      let disabledInfo = { ...this.state.ingredients\n      }; // The for..in is used to iterate through an object\n\n      for (let key in disabledInfo) {\n        // Assign a boolean value to each ingredient in the new ingredients object\n        disabledInfo[key] = disabledInfo[key] <= 0;\n      } // { meat: false, salad: true, cheese: true ...}\n\n\n      return disabledInfo;\n    };\n\n    this.updatePurchaseState = updatedIngredients => {\n      let sum = 0;\n\n      for (let key in updatedIngredients) {\n        sum += updatedIngredients[key];\n      }\n\n      const updatedPurchaseState = sum > 0;\n      this.setState({\n        isPurchaseable: updatedPurchaseState\n      });\n    };\n\n    this.purchaseHandler = () => {\n      const isPurchasing = this.state.isPurchasing;\n      this.setState({\n        isPurchasing: !isPurchasing\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Burger, {\n          ingredients: this.state.ingredients\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [this.state.isPurchasing ? /*#__PURE__*/_jsxDEV(Modal, {\n          isPurchasing: this.state.isPurchasing,\n          purchaseHandler: this.purchaseHandler,\n          children: /*#__PURE__*/_jsxDEV(OrderSummary, {\n            ingredients: this.state.ingredients\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 15\n        }, this) : null, /*#__PURE__*/_jsxDEV(BuildControlsList, {\n          addIngredientHandler: this.addIngredientHandler,\n          removeIngredientHandler: this.removeIngredientHandler,\n          disabledInfo: this.getDisabledInfo(),\n          price: this.state.totalPrice,\n          isPurchaseable: this.state.isPurchaseable,\n          purchaseHandler: this.purchaseHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default BurgerBuilder;","map":{"version":3,"sources":["/Users/alfred/Desktop/React - The Complete Guide/burger-builder/src/container/BurgerBuilder/BurgerBuilder.js"],"names":["React","Component","BuildControlsList","Burger","OrderSummary","Modal","INGREDIENT_PRICES","meat","cheese","bacon","salad","BurgerBuilder","state","ingredients","totalPrice","isPurchaseable","isPurchasing","addIngredientHandler","type","oldCount","updatedCount","updatedIngredients","updatedTotalPrice","setState","updatePurchaseState","removeIngredientHandler","getDisabledInfo","disabledInfo","key","sum","updatedPurchaseState","purchaseHandler","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport BuildControlsList from '../../components/Burger/BuildControlsList/BuildControlsList'\nimport Burger from '../../components/Burger/Burger'\nimport OrderSummary from '../../components/Burger/OrderSummary/OrderSummary'\nimport Modal from '../../components/UI/Modal/Modal'\n\nconst INGREDIENT_PRICES = {\n  meat: 1.5,\n  cheese: 0.5,\n  bacon: 0.75,\n  salad: 0.5\n}\n\nclass BurgerBuilder extends Component {\n\n  state = {\n    ingredients: {\n      meat: 0,\n      cheese: 0,\n      bacon: 0,\n      salad: 0\n    },\n    totalPrice: 0,\n    isPurchaseable: false,\n    isPurchasing: false\n  }\n\n  addIngredientHandler = (type) => {\n    const oldCount = this.state.ingredients[type]\n    const updatedCount = oldCount + 1\n    // This creates a deep copy of the object \n    // (for arrays and objects, state should be updated in an immutable way, cuz they are reference types)\n    let updatedIngredients = { ...this.state.ingredients }\n    updatedIngredients[type] = updatedCount\n    let updatedTotalPrice = this.state.totalPrice + INGREDIENT_PRICES[type]\n    this.setState({\n      ingredients: updatedIngredients,\n      totalPrice: updatedTotalPrice\n    })\n    this.updatePurchaseState(updatedIngredients)\n  }\n\n  removeIngredientHandler = (type) => {\n    const oldCount = this.state.ingredients[type]\n    const updatedCount = oldCount - 1\n    let updatedIngredients = { ...this.state.ingredients }\n    updatedIngredients[type] = updatedCount\n    let updatedTotalPrice = this.state.totalPrice - INGREDIENT_PRICES[type]\n    this.setState({\n      ingredients: updatedIngredients,\n      totalPrice: updatedTotalPrice\n    })\n    this.updatePurchaseState(updatedIngredients)\n  }\n\n  getDisabledInfo = () => {\n    let disabledInfo = { ...this.state.ingredients }\n    // The for..in is used to iterate through an object\n    for (let key in disabledInfo) {\n      // Assign a boolean value to each ingredient in the new ingredients object\n      disabledInfo[key] = disabledInfo[key] <= 0\n    }\n    // { meat: false, salad: true, cheese: true ...}\n    return disabledInfo\n  }\n\n  updatePurchaseState = (updatedIngredients) => {\n    let sum = 0\n    for (let key in updatedIngredients) {\n      sum += updatedIngredients[key]\n    }\n    const updatedPurchaseState = sum > 0\n    this.setState({ isPurchaseable: updatedPurchaseState })\n  }\n\n  purchaseHandler = () => {\n    const isPurchasing = this.state.isPurchasing\n    this.setState({ isPurchasing: !isPurchasing })\n  }\n\n\n  render() {\n\n    return (\n      <>\n        <div>\n          <Burger ingredients={this.state.ingredients} />\n        </div>\n        <div>\n          {\n            this.state.isPurchasing ?\n              <Modal\n                isPurchasing={this.state.isPurchasing}\n                purchaseHandler={this.purchaseHandler}\n              >\n                <OrderSummary ingredients={this.state.ingredients} />\n              </Modal>\n              : null\n          }\n\n          <BuildControlsList\n            addIngredientHandler={this.addIngredientHandler}\n            removeIngredientHandler={this.removeIngredientHandler}\n            disabledInfo={this.getDisabledInfo()}\n            price={this.state.totalPrice}\n            isPurchaseable={this.state.isPurchaseable}\n            purchaseHandler={this.purchaseHandler}\n          />\n        </div>\n      </>\n    )\n  }\n}\n\n\n\n\nexport default BurgerBuilder;"]},"metadata":{},"sourceType":"module"}